First,create job class such that each instance of a job has a start time,an end time and a profit;
class Job:
    def _init_(self, start, finish, profit):
        self.start = start
        self.finish = finish
        self.profit = profit
  Next from our input arrays let's create jon instances based on ending times:
  def solution(startTime, endTime, profit) -> int:
    jobs = []
    for i in range(len(profit)):
        jobs.append(Job(startTime[i], endTime[i], profit[i]))
    # sort jobs in increasing order of their finish times
    jobs.sort(key=lambda x: x.finish)
    Ater that we take our usual bottom up approach:
    # initialize max profit table
    maxProfit = [0 for i in range(len(jobs))]
    maxProfit[0] = jobs[0].profit
    for i in range(1, len(jobs)):
        # find the index of last non-conflicting job with current job
        # j = -1 if no index could be found
        j = get_last_non_conflicting_job(jobs, i)
        # include the current job with its non-conflicting job
        profit = jobs[i].profit
        if j != -1:
            profit += maxProfit[j]
        # store the maximum profit by including or excluding the current job
        maxProfit[i] = max(profit, maxProfit[i-1])
    return maxProfit[len(jobs) - 1]
    To get our last non-conflicting job,we can do a simple linera search:-
    def get_last_non_conflicting_job(jobs, n):
    for i in reversed(range(n)):
        if jobs[i].finish <= jobs[n].start:
            return i
    return -1  # if no non-conflicting job is found
    Our linear search can be optimised further using a binary search:-
    def get_last_non_conflicting_job(jobs, n):
    low = 0
    high = n
    while low <= high:
        mid = (low + high) // 2
        if jobs[mid].finish <= jobs[n].start:
            if jobs[mid + 1].finish <= jobs[n].start:
                low = mid + 1
            else:
                return mid
        else:
            high = mid - 1
    return -1  # if no non-conflicting job is found
    
   
